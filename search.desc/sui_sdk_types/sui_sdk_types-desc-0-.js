searchState.loadedDescShard("sui_sdk_types", 0, "Core type definitions for the Sui blockchain.\nCreate and initialize the accumulator root object\nA new Jwk\nUnique identifier for an Account on the Sui blockchain.\nObject is exclusively owned by a single address, and is …\nAddress is denied for this coin type\nAn argument to a programmable transaction command\nArity mismatch for Move function. The number of arguments …\nCreate and initialize the authenticator object used for …\nExpire old JWKs\nExpire JWKs used for zklogin\nUpdate the set of valid JWKs\nUpdate set of valid JWKs used for zklogin\nA compressed bitmap using the Roaring bitmap compression …\nA bls12381 min-sig public key.\nA bls12381 min-sig signature.\nA point on the BN254 elliptic curve.\nInitialize the bridge committee\nCreate and initialize the bridge object\nConsensus objects in canceled transaction. The sequence …\nA transaction that was canceled\nA transaction that was canceled\nCanceled transaction version assignment.\nCanceled transaction version assignment V2.\nCertificate is on the deny list\nSystem transaction used to change the epoch\nSystem transaction used to end an epoch.\nEnd the epoch and start the next one\nInput/output state of an object that was changed during …\nDigest of the checkpoint artifacts.\nA commitment made by a checkpoint.\nThe committed to contents of a checkpoint.\nA header for a Checkpoint on the Sui blockchain.\nTransaction information committed to in a checkpoint\nA G1 point\nA G2 point\nCircular Object Ownership\nCoin balance overflowed an u64\nCreate and initialize the coin metadata registry object\nCoin type is globally paused for use\nA single command in a programmable transaction.\nAn error with an argument to a command\nInvalid command argument\nObject is exclusively owned by a single address and …\nV1 of the consensus commit prologue system transaction\nV1 consensus commit update\nV2 of the consensus commit prologue system transaction\nV2 consensus commit update\nV3 of the consensus commit prologue system transaction\nV3 consensus commit update\nV4 of the consensus commit prologue system transaction\nV4 consensus commit update\nVersion assignments performed by consensus\nThe requested consensus object operation is not allowed\nconsensus object operations such a wrapping, freezing, or …\nA type provided did not match the specified constraint\nCreate and initialize the deny list object\nA 32-byte Blake2b256 hash output.\nDigest in upgrade ticket and computed digest differ\nCreate and initialize the display metadata registry object\nAn Elliptic Curve Multiset Hash attesting to the set of …\nAn ed25519 public key.\nAn ed25519 signature.\nEffects from the transaction are too large\nSet of operations to run at the end of the epoch to close …\nData, which when included in a <code>CheckpointSummary</code>, signals …\nOperation run at the end of an epoch\nValidators wont sign a transaction unless the expiration …\nAn event\nCertificate is canceled due to congestion on consensus …\nCertificate is canceled because randomness could not be …\nAn error that can occur during the execution of a …\nThe status of an executed Transaction\nKey for an execution time observation\nSet of Execution Time Observations from the committee.\nThe old version, digest and owner.\nThe Transaction didn’t execute successfully.\nAttempted to used feature that is not supported yet\nFunction not found\nThe gas coin. The gas coin can only be used by-ref, except …\nSummary of gas charges.\nPayment information for executing a transaction\nTransaction used to initialize the chain state.\nAn object part of the initial chain state\nThe genesis transaction\nDefines what happened to an ObjectId during execution\nA move identifier\nObject is immutable, and hence ownership doesn’t matter.\nA move object that is either immutable or address owned\nPackage upgrade is incompatible with previous version\nOut of bounds access to input or results\nAn input to a user transaction\nOne of the input objects or primitive values (from …\nRequested consensus object has been deleted\nInsufficient coin balance for requested operation\nInsufficient Gas\nA Signing Intent\nByte signifying the application id of an <code>Intent</code>\nByte signifying the scope of an <code>Intent</code>\nByte signifying the version of an <code>Intent</code>\nInvalid argument arity. Expected a single argument but …\nInvalid argument to private entry function. Private entry …\nThe argument cannot be deserialized into a value of the …\nInvalid usage of Gas coin. The Gas coin can only be used …\nInvalid Gas Object.\nA valid linkage was unable to be determined for the …\nImmutable objects cannot be passed by mutable reference, …\nImmutable objects cannot be passed by-value.\nInvalid public Move function signature. Unsupported return …\nInvalid usage of result. Expected a single result but …\nInvalid Transfer Object, object does not have public …\nThe argument cannot be instantiated from raw bytes\nInvalid usage of move value.\nInvariant Violation\nA JSON Web Key\nKey to uniquely identify a JWK\nThe length of an bls12381 public key in bytes.\nThe length of an bls12381 signature key in bytes.\nThe length of an ed25519 public key in bytes.\nThe length of an ed25519 signature key in bytes.\nThe length of an secp256k1 public key in bytes.\nThe length of an secp256k1 signature key in bytes.\nThe length of an secp256r1 public key in bytes.\nThe length of an secp256r1 signature key in bytes.\nA constant representing the length of a digest in bytes.\nCommand to build a move vector out of a set of individual …\n<code>forall T: Vec&lt;T&gt; -&gt; vector&lt;T&gt;</code> Given n-values of the same …\nCommand to merge multiple coins of the same type into a …\n<code>(&amp;mut Coin&lt;T&gt;, Vec&lt;Coin&lt;T&gt;&gt;)</code> It merges n-coins into the …\nIndicates that an Object was modified at a specific version\nMove runtime abort\nCommand to call a move function\nA call to either an entry or a public Move function\nLocation in move bytecode where an error occurred\nA move package\nError from a non-abort instruction. Possible causes: …\nMove value (possibly an upgrade ticket or a dev-inspect …\nA move struct\nMove vector element (passed to MakeMoveVec) with size …\nAggregated signature from members of a multisig committee.\nA multisig committee\nA member in a multisig committee\nEnum of valid public keys for multisig committee members\nA signature from a member of a multisig committee.\nDeleted consensus objects that appear mutably/owned in the …\nLike a <code>Result</code> but it accesses a nested result. Currently, …\nNon Entry Function Invoked. Move Call must start with an …\nThe transaction has no expiration\nObject is not a package\nSame definition as in ObjectIn.\nAn object on the sui blockchain\nObject is exclusively owned by a single object, and is …\nObject data, either a package or struct\nState of an object prior to execution\nState of an object after execution\nReference to an object\nAn object reference with owner information\nMove object is larger than the maximum allowed size\nType of a Sui object\nAny written object, including all of mutated, created, …\nEnum of different types of ownership for an object.\nMap from each module name to raw serialized Move module …\nMove package containing one or more bytecode modules\nPackageId does not matach PackageId in upgrade ticket\nPackage is larger than the maximum allowed size\nAn error with a upgrading a package\nInvalid package upgrade\nPackages writes need to be tracked separately with version …\nA passkey authenticator.\nPublic key of a <code>PasskeyAuthenticator</code>.\nRead of a per-epoch config object that should remain the …\nRead of a per-epoch config and it’s starting sequence …\nA user transaction\nA user transaction comprised of a list of native commands …\nCommand to publish a new move package\nPublishes a Move package. It takes the package bytes and a …\nPublish Error, Non-zero Address. The modules in the …\nPublish or Upgrade dependency downgrade.\nPublish or Upgrade is missing dependency\nA move value serialized as BCS.\nCreate and initialize the randomness object\nRandomness update\nRandomness update\nDeleted consensus objects that appear as read-only in the …\nRead-only consensus objects from the input. We don’t …\nA move object that is attempted to be received in this …\nThe result of another command (from <code>ProgrammableTransaction</code>…\nOut of bounds access to subresult\nA secp256k1 public key.\nA secp256k1 signature.\nA secp256r1 public key.\nA secp256r1 signature.\nObject is shared, can be used by any address, and is …\nA move object whose owner is “Shared”\nFlag use to disambiguate the signature schemes supported …\nA basic signature\nCommand to split a single coin object into multiple coins\n<code>(&amp;mut Coin&lt;T&gt;, Vec&lt;u64&gt;)</code> -&gt; <code>Vec&lt;Coin&lt;T&gt;&gt;</code> It splits off …\nExecution time observations from the committee to preserve …\nAn object whose governing logic lives in a published Move …\nA Move struct of the given type\nType information for a move struct\nThe Transaction successfully executed.\nSui Move Bytecode Verification Error.\nSui Move Bytecode verification timed out.\nSystem package\nA transaction\nThe output or effects of executing a transaction\nVersion 1 of TransactionEffects\nVersion 2 of TransactionEffects\nEvents emitted during the successful execution of a …\nA TTL for a transaction\nTransaction type\nCommand to transfer ownership of a set of objects to an …\n<code>(Vec&lt;forall T:key+store. T&gt;, address)</code> It sends n-objects …\nAn error with a type argument\nType argument error\nType arity mismatch for Move function. Mismatch between …\nThe type of the value does not match the expected type\nA type was not found in the module specified\nIdentifies a struct and the module it was defined in\nType of a move value\nUnable to fetch package\nType of unchanged consensus object\nA Consensus object that wasn’t changed during execution\nUpgrade policy is not valid\nUnused result without the drop ability.\nCommand to upgrade an already published package\nUpgrades a Move package Takes (in order):\nUpgraded package info for the linkage table\nA signature from a user\nAn aggregated signature from multiple Validators.\nThe Validator Set for a particular epoch.\nA member of a Validator Committee\nAn execution time observation from a particular validator\nA signature from a Validator\nObject version assignment from consensus\nObject version assignment from consensus\nMoveVm invariant violation\nBytecode verification error.\nIndicates the transaction tried to write objects too large …\nA constant representing a zero digest.\nA zklogin authenticator\nA claim of the iss in a zklogin proof\nA zklogin groth16 proof and the required inputs to perform …\nA zklogin groth16 proof\nPublic Key equivalent for Zklogin authenticators\nDigest of any additional state computed by the consensus …\nOwner of the balance change\nThe address to transfer ownership to\nAlgorithm parameter, …\nThe amount indicate the balance value changes.\nThe amounts to split off\nThe arguments to the function.\nReturns a slice of bytes representing the digest.\nTry to interpret this object as a move struct\nOpaque authenticator data for this passkey signature.\nThe initial version of the authenticator object that it …\nThe initial version of the authenticator object that it …\nAuxiliary data that are not protocol-critical, generated …\nThe bitmap that indicates which committee members provided …\nTotal budget willing to spend for the execution of a …\nThe parsed challenge message for this passkey signature.\nObjects whose state are changed in the object store.\nCommitments to checkpoint-specific state.\nClears all integers in this set.\nStructured, unparsed, JSON for this passkey signature.\nWraps any type tag in a Coin type. For example, …\nThe coin to split\nCoin to merge coins into\nType of the Coin\nSet of coins to merge into <code>coin</code>\nThe commands to be executed sequentially. A failure in any …\nUnix timestamp from consensus\nUnix timestamp from consensus\nUnix timestamp from consensus\nUnix timestamp from consensus\nThe committee for this aggregated signature\nThe total amount of gas charged for computation during the …\nCost of computation/execution\nDigest of consensus output\nDigest of consensus output\nDigest of consensus output\nStores consensus handler determined shared object version …\nStores consensus handler determined shared object version …\nThe object references of the consensus objects used in …\nReturns <code>true</code> if this set contains the specified integer.\nThe hash of the <code>CheckpointContents</code> for this checkpoint.\nReturn the raw contents of this struct\nBCS serialized bytes of the event\nObjectReference and owner of new objects created.\nReturn this object’s data\nObject Refs of objects now deleted (the new refs).\nThe set of transaction digests this transaction depends on.\nThe set of transaction digests this transaction depends on.\nSet of packages that the to-be published package depends on\nSet of packages that the to-be published package depends on\nDerive an <code>Address</code> from this Public Key\nDerive an <code>Address</code> from this MultisigCommittee.\nDerive an <code>Address</code> from this Passkey Public Key\nDerive an <code>Address</code> from this Public Key\nDerive an <code>Address</code> from this Public Key\nProvides an iterator over the addresses that correspond to …\nDerive an <code>Address</code> from this <code>ZkLoginPublicIdentifier</code> by …\nDerive an <code>Address</code> from this <code>ZkLoginPublicIdentifier</code> by …\nDerive an ObjectId for a Dynamic Child Object.\nCreate an ObjectId from <code>TransactionDigest</code> and <code>count</code>.\nDerive the address of a <code>derived_object</code>\nDeserialize a bitmap into memory from the standard Roaring …\nReturns the digest of the object that this ObjectReference …\nCalculate the digest of this <code>Object</code>\nRSA public exponent, …\nThe effects produced by executing this transaction\nThe set individual elements to build the vector with\nExtra data only present in the final checkpoint of an …\nThe epoch when this transaction was executed.\nThe epoch when this transaction was executed.\nReturn the epoch in which this transaction was executed.\nEpoch that this checkpoint belongs to.\nThe epoch when this transaction was executed.\nThe epoch when this transaction was executed.\nEpoch of the randomness state update transaction\nEpoch of the authenticator state update transaction\nMost recent epoch in which the jwk was validated\nEpoch of the commit prologue transaction\nEpoch of the commit prologue transaction\nEpoch of the commit prologue transaction\nEpoch of the commit prologue transaction\nThe next (to become) epoch ID.\nCommitments to epoch specific state (e.g. live object set)\nThe running total gas costs of all transactions included …\nUnix timestamp when epoch started\nThe events, if any, emitted by this transaciton during …\nThe digest of the events emitted during execution, can be …\nThe digest of the events emitted during execution, can be …\nRust definitions of move/sui framework types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a digest from a Base58 encoded string.\nTry constructing from a byte flag\nGenerates a digest from bytes.\nDecodes an address from a hex encoded string.\nDecodes an address from a hex encoded &amp;’static str.\nDecodes a digest from a Base58 encoded &amp;’static str.\nConstruct an Identifier from a <code>&amp;&#39;static str</code>, panicking if …\nThe function index\nThe function to be called.\nThe name of the function if available\nReturns the struct tag for SUI wrapped in a Coin. This …\nThe updated gas object reference. Have a dedicated field …\nThe updated gas object reference, as an index into the …\nThe gas used in this transaction.\nThe gas used in this transaction.\nReturn the gas cost summary of the transaction.\nThe total gas used, which is the sum of computation and …\nThe gas used by this transaction\nThe gas used by this transaction\nGenerates a new digest from the provided random number …\nAddress or Id of this package\nWhether this object ID is created or deleted in this …\nThe underlying <code>Secp256r1PublicKey</code> for this passkey.\nReturns a slice to the inner array representation of this …\nThe state of all inputs to this transaction as they were …\nState of the object in the store prior to this transaction.\nZklogin proof and inputs required to perform proof …\nInput objects or primitive values\nAdds a value to the set.\nInserts a range of values. Returns the number of inserted …\nIndex into the code stream for a jump. The offset is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the underlying byte array of a Address.\nReturn the underlying byte array of an Bls12381PublicKey.\nReturn the underlying byte array of an Bls12381Signature.\nReturn the underlying byte array of an Ed25519PublicKey.\nReturn the underlying byte array of an Ed25519Signature.\nReturn the underlying byte array of an Secp256k1PublicKey.\nReturn the underlying byte array of an Secp256k1Signature.\nReturn the underlying byte array of an Secp256r1PublicKey.\nReturn the underlying byte array of an Secp256r1Signature.\nReturns the inner array representation of this digest.\nReturns a 3-tuple containing the object id, version, and …\nChecks if this is a Coin type\nReturns <code>true</code> if there are no integers in this set.\nChecks if the Committee is valid.\nThe issuer or identity of the OIDC provider.\nIterator over each value stored in the Bitmap, guarantees …\nThe Jwk\nIdentifier used to uniquely identify a Jwk\nA key id use to uniquely identify a key from an OIDC …\nKey type parameter, …\nThe version number of all the written Move objects by this …\nThe legacy roaring bitmap, if this is a legacy formatted …\nReturns the number of distinct integers added to the set.\nFor each dependency, maps original package ID to the info …\nMaximum epoch for which the proof is valid.\nThe members of the committee\nexpire JWKs that have a lower epoch than this\nThe version that every modified (mutated or deleted) …\nModule name of the top-level function invoked by a …\nThe module name\nThe specific module in the package containing the function.\nSet of modules defined by this package\nThe serialized move modules\nThe serialized move modules\nObjectReference and owner of mutated objects, including …\nRSA modulus, …\nReturn the name of this signature scheme\nTurn a Result into a NestedResult. If the argument is not …\nThe net gas usage, which is the total gas used minus the …\nTotal number of transactions committed since genesis, …\nCreates an empty <code>Bitmap</code>.\nConstruct a new member from a <code>MultisigMemberPublicKey</code> and …\nConstruct a new committee from a list of <code>MultisigMember</code>s …\nConstruct a new aggregated multisig signature.\nGenerates a new digest from the provided 32 byte array …\nCreate a new gas cost summary.\nCreates a new object reference from the object’s id, …\nConstruct a move struct\nBuild an object\nnewly active jwks\nThe set of Validators that will be in the …\nThe protocol version that is in effect during the next …\nThe fee for the rebate. The portion of the storage rebate …\nThe non-refundable storage fee.\nReturns a reference to the object id that this …\nReturn the ObjectId of this object\nReturn this object’s id\nId of the object\nReturn the type of the struct\nReturn this object’s type\nSet of objects to transfer\nThe state of all output objects created or mutated by this …\nState of the object in the store after this transaction.\nReturn this object’s owner\nOwner of the gas objects, either the transaction sender or …\nThe package id\nPackage id of the package to upgrade\nThe package containing the module and function.\nPackage id of the top-level function invoked by a MoveCall …\nThe hash of the previous <code>CheckpointSummary</code>.\nReturn the digest of the transaction that last modified …\nGas unit price to use when charging for computation\nThe protocol version in effect in the new epoch.\nThis member’s public key.\nThe passkey public key\nUpdated random bytes\nThe initial version of the randomness object that it was …\nRandomness round of the update\nRemoves a value from the set. Returns <code>true</code> if the value …\nConsensus round of the authenticator state update\nConsensus round of the commit\nConsensus round of the commit\nConsensus round of the commit\nConsensus round of the commit\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nReturn the flag for this signature scheme\nAddress of the account that sent the transaction where …\nThe height of this checkpoint.\nSerialize this bitmap into the standard Roaring on-disk …\nThe passkey signature.\nUser signature with the pubkey attested to by the provided …\nThe list of signatures from committee members\nThe status of the execution\nThe status of the execution\nReturn the status of the transaction.\nThe status of the execution\nThe status of the execution\nThe total amount of gas charged for storage during the …\nStorage cost, it’s the sum of all storage cost for all …\nReturn the storage rebate locked in this object\nThe amount of storage cost refunded to the user for all …\nThe amount of storage rebate refunded to the txn senders.\nThe sub DAG index of the consensus commit. This field will …\nThe sub DAG index of the consensus commit. This field will …\nReturns the struct tag for the native SUI token (without …\nSystem packages (specifically framework and move stdlib) …\nThe total signature weight required to authorize a …\nTicket authorizing the upgrade\nTimestamp of the checkpoint - number of milliseconds from …\nReturns a Base58 encoded string representation of this …\nConvert to a byte flag\nThe input Transaction\nThe transaction digest\nThe transaction digest\nThe type of the event emitted\nType of the individual elements\nThe type arguments to the function.\nMaps struct/module to a package version where it was first …\nConsensus objects that are not mutated in this …\nObjectReference and owner of objects that are unwrapped in …\nObject refs of objects previously wrapped in other objects …\nId of the upgraded packages\nVersion of the upgraded package\nReturns the version of the object that this …\nReturn the version of this object\nReturn this object’s version\nMost move packages are uniquely identified by their ID …\n<code>CheckpointSummary</code> is not an evolvable structure - it must …\nWeight of this member’s signature.\nConfigure with a legacy roaring bitmap\nObject refs of objects now wrapped in other objects.\nIndex of the problematic type argument\nThe command, if any, during which the error occurred.\nThe error encountered during execution.\nThe function to be called.\nThe specific module in the package containing the function.\nThe package containing the module and function.\nThe type arguments to the function. NOTE: This field is …\nControls whether the caller asks for a mutable reference …\nThe owner of the object.\nThe version at which the object most recently became a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Blake2b256 Hasher\nConvenience function for creating a new Hasher instance, …\nFinalize hashing, consuming the Hasher instance and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a new Blake2b256 Hasher instance.\nProcess the provided data, updating internal state.")