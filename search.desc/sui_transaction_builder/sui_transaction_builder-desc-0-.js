searchState.loadedDescShard("sui_transaction_builder", 0, "A separate type to support denoting a function by a more …\nA transaction input that will be serialized from BCS.\nA builder for creating transactions. Use <code>resolve</code> to …\nAdd one or more gas objects to use to pay for the …\nAssuming everything is resolved, convert this transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the argument to be the gas object.\nMake a value available to the transaction as an input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a move vector from a list of elements. If the …\nMerge a list of coins into a single coin, without …\nCall a Move function with the given arguments.\nConstructor for the function type.\nCreate a new transaction builder and initialize its …\nPublish a list of modules with the given dependencies. The …\nSet the expiration of the transaction to be a specific …\nSet the gas budget for the transaction.\nSet the gas price for the transaction.\nSet the sender of the transaction.\nSet the sponsor of the transaction.\nSplit a coin by the provided amounts, returning multiple …\nTransfer a list of objects to the given address, without …\nUpgrade a Move package.\nA potentially unresolved transaction input. Note that one …\nReturn an object with only its unique identifier.\nMake the object shared and set <code>mutable</code> to true when the …\nMake the object shared and set <code>mutable</code> to false when the …\nMake the object shared and set <code>mutable</code> to true when the …\nThe digest of this object. This field is only relevant for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an immutable kind of object with all required …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this object is mutable. This field is only …\nUnique identifier for this object.\nReturn an owned kind of object with all required fields.\nReturn a receiving kind of object with all required fields.\nReturn a shared object.\nEither the <code>initial_shared_version</code> if object is a shared …\nSet the specified digest.\nSet the object kind to immutable.\nSet the initial shared version.\nSet the object kind to owned.\nSet the object kind to receiving.\nSet the object kind to shared.\nSet the specified version.")