searchState.loadedDescShard("sui_crypto", 0, "Signature errors.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nInterface for signing user transactions and messages in Sui\nInterface for verifying user transactions and messages in …\nVerifier that will verify all UserSignature variants\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error with an associated source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error with no associated source\nSign the given message and return a digital signature\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nThe length of an bls12381 private key in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of an ed25519 private key in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize public key from ASN.1 DER-encoded data (binary …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize public key from PEM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize this private key as DER-encoded PKCS#8\nSerialize this public key as DER-encoded data\nSerialize this private key as PEM-encoded PKCS#8\nSerialize this public key into PEM format\nVerifier that will verify all UserSignature variants\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length of an secp256k1 private key in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize public key from ASN.1 DER-encoded data (binary …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize public key from PEM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize this private key as DER-encoded PKCS#8\nSerialize this public key as DER-encoded data\nSerialize this private key as PEM-encoded PKCS#8\nSerialize this public key into PEM\nThe length of an secp256r1 private key in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize public key from ASN.1 DER-encoded data (binary …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize public key from PEM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize this private key as DER-encoded PKCS#8\nSerialize this public key as DER-encoded data\nSerialize this private key as PEM-encoded PKCS#8\nSerialize this public key into PEM\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize public key from ASN.1 DER-encoded data (binary …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize public key from PEM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize this private key as DER-encoded PKCS#8\nSerialize this public key as DER-encoded data\nSerialize this private key as DER-encoded PKCS#8\nSerialize this public key as PEM\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")